//
// Created by jimmy on 26-9-16.
//

#ifndef MATRIX_MATRIX_H
#define MATRIX_MATRIX_H

#include <array>
#include <vector>
#include <iostream>

#include <vector>

template <typename T> class Matrix {
private:
    std::vector<std::vector<T> > mat;
    unsigned rows;
    unsigned cols;

public:
    Matrix(unsigned _rows, unsigned _cols, const T& _initial);
    Matrix(const Matrix<T>& aMatrix);
    virtual ~Matrix();

    // Operator overloading, for "standard" mathematical matrix operations
    Matrix<T>& operator=(const Matrix<T>& aMatrix);

    // Matrix mathematical operations
    Matrix<T> operator+(const Matrix<T>& aMatrix);
    Matrix<T>& operator+=(const Matrix<T>& aMatrix);
    Matrix<T> operator-(const Matrix<T>& aMatrix);
    Matrix<T>& operator-=(const Matrix<T>& aMatrix);
    Matrix<T> operator*(const Matrix<T>& aMatrix);
    Matrix<T>& operator*=(const Matrix<T>& aMatrix);
    Matrix<T> transpose();

    // Matrix/scalar operations
    Matrix<T> operator+(const T& aMatrix);
    Matrix<T> operator-(const T& aMatrix);
    Matrix<T> operator*(const T& aMatrix);
    Matrix<T> operator/(const T& aMatrix);

    // Matrix/vector operations
    std::vector<T> operator*(const std::vector<T>& aMatrix);
    std::vector<T> diag_vec();

    // Access the individual elements
    T& operator()(const unsigned& row, const unsigned& col);
    const T& operator()(const unsigned& row, const unsigned& col) const;

    // Access the row and column sizes
    unsigned get_rows() const;
    unsigned get_cols() const;

};


#include "Matrix.cpp"

#endif //MATRIX_MATRIX_H
